<?xml version="1.0" encoding="GBK"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans   
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/tx   
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
        http://www.springframework.org/schema/mvc   
    	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/context   
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">

     <!-- 对项目中的所有类进行扫描以完成Bean创建并进行自动注入。  
           支持 @Controller、@Service 以及 @Repository 和 @Component -->
	<!-- 扫描项目中com.fh.shop.controller包下所有的类，从而使类中的@Controller注解生效 -->
    <context:component-scan base-package="com.fh.shop.backend.controller"/>
	<context:component-scan base-package="com.fh.shop.backend.api"/>


	<!--上传文件解析-->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--设置文件上传的大小-->
		<property name="maxUploadSize" value="10000000"/>
	</bean>

	<!--
        jsp视图解析器，对模型视图名称的解析，即在模型视图名称添加前后缀
        如/view/welcome.jsp对应的视图名就是：welcome
        这个类在视图解析器链中一定要定义在其他视图的后面，因为它始终会返回一个视图
    -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/view/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
	
	
		<!-- 配置拦截器 -->
		 <mvc:interceptors>
			<mvc:interceptor>
				<!--  匹配所有路径：拦截所有交给mvc处理的请求 -->
				 <mvc:mapping path="/**"/>
				<!-- mvc:exclude-mapping是另外一种拦截，它可以在你后来的测试中对某个页面进行不拦截，这样就不用在
					LoginInterceptor的preHandler方法里面获取不拦截的请求uri地址了(优选) -->
				<mvc:exclude-mapping path="/user/loginUserInfo.action" />
				<!--<mvc:exclude-mapping path="/user/toAddUserInfo.action" />
				<mvc:exclude-mapping path="/user/addUserInfo.action" />-->
				<bean class="com.fh.shop.backend.interceptor.LoginInterceptor"></bean>
			</mvc:interceptor>
		</mvc:interceptors>
	
    	<!-- 开启注解驱动删除 注解@responsebody -->
		<mvc:annotation-driven conversion-service="conversionService"/>

	    <!-- 加载@DateTimeFormat-->
	    <bean id="conversionService"
	          class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	     </bean>

		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		    <property name="dataSource" ref="dataBaseInfo"/>
		</bean>

		<!-- 配置事务的传播特性 -->
		<tx:advice id="txAdvice" transaction-manager="txManager"><!-- 配置事务管理器 -->
		    <tx:attributes>

		        <tx:method name="add*" propagation="REQUIRED" />
		        <tx:method name="insert*" propagation="REQUIRED" />
		        <tx:method name="save*" propagation="REQUIRED" />
		        <tx:method name="del*" propagation="REQUIRED" />
		        <tx:method name="modify*" propagation="REQUIRED" />
		        <tx:method name="update*" propagation="REQUIRED" />
		        <tx:method name="reset*" propagation="REQUIRED" />
		        <tx:method name="increase*" propagation="REQUIRED" />
		         <tx:method name="*" read-only="true"/>
		        <!-- 如果不是以上三种，则配置成只读事务(如select)。只读事务可以提高性能，当更新某个对象时，将不会再做脏数据检查。(因为是只读的并不用更新，所以不用再作比较,判断是否读取到脏数据。) -->
		    </tx:attributes>
		</tx:advice>

		<!-- .. 代表改包下任意嵌套层次的子包 -->
		<aop:config>
		    <aop:advisor pointcut="execution(* com.fh.shop.backend.biz..*.*(..))" advice-ref="txAdvice"/>
		</aop:config>

		<!-- aop日志统一管理 -->
	    <bean id="logAspect" class="com.fh.shop.backend.aspect.LogAspect"></bean>
	
	    <aop:config>
	        <aop:aspect ref="logAspect">
	            <aop:pointcut id="logPointCut" expression="execution(* com.fh.shop.backend.controller..*.add*(..))||execution(* com.fh.shop.backend.controller..*.del*(..))||execution(* com.fh.shop.backend.controller..*.update*(..))||execution(* com.fh.shop.backend.controller..*.login(..))"/>
	            <aop:around method="doLog" pointcut-ref="logPointCut"/>
	        </aop:aspect>
	    </aop:config>
    
	

	
</beans>